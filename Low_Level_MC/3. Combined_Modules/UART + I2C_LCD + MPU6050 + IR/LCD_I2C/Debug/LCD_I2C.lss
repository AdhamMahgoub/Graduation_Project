
LCD_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ac  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000004db  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000004e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002526  00000000  00000000  00000669  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aee  00000000  00000000  00002b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c8e  00000000  00000000  0000367d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b8  00000000  00000000  0000430c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002da  00000000  00000000  000045c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000078d  00000000  00000000  0000489e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  0000502b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000040a  0000040a  0000049e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000513c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Magneto_init 00000018  000003b0  000003b0  00000444  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.IR_Triggered 00000022  0000038e  0000038e  00000422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.MPU6050_Init 00000086  000001a0  000001a0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .progmemx.data 0000000b  000000a8  000000a8  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 18 .text.main    0000003e  00000292  00000292  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.DIO_voidSetPinDirection 000000ec  000000b4  000000b4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.DIO_u8GetPinValue 0000006c  00000226  00000226  000002ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.I2C_Init 00000008  000003fa  000003fa  0000048e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.I2C_Start 0000003a  000002d0  000002d0  00000364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.I2C_Stop 0000000c  000003ee  000003ee  00000482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.I2C_Start_Wait 00000034  0000030a  0000030a  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.I2C_Write 00000024  0000036a  0000036a  000003fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.UART_init 00000010  000003de  000003de  00000472  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.UART_send_byte 00000008  00000402  00000402  00000496  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.UART_puts 0000002c  0000033e  0000033e  000003d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_fini 00000002  00000412  00000412  000004a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_funcs_on_exit 00000002  00000414  00000414  000004a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_simulator_exit 00000002  00000416  00000416  000004aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.exit    00000016  000003c8  000003c8  0000045c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text._Exit   00000004  0000040e  0000040e  000004a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
   8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
   c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  10:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  14:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  18:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  1c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  20:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  24:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  28:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  2c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  30:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  34:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  38:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  3c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  40:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  44:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  48:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  4c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  50:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 49 01 	call	0x292	; 0x292 <main>
  a0:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

0000040a <__bad_interrupt>:
 40a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Magneto_init:

000003b0 <Magneto_init>:
#define QMC5883L_ADDR 0x0D
#define QMC5883L_REG_CONFIG 0x09
#define QMC5883L_REG_DATA 0x00

void Magneto_init() {
	I2C_Start(QMC5883L_ADDR << 1);			// Start and write SLA+W
 3b0:	8a e1       	ldi	r24, 0x1A	; 26
 3b2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <I2C_Start>
	I2C_Write(QMC5883L_REG_CONFIG);         // Write memory location address
 3b6:	89 e0       	ldi	r24, 0x09	; 9
 3b8:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Write(0x1D);						// Configure register A, set output data rate to 200Hz, set measurement range to 8G, set mode to continuous measurement
 3bc:	8d e1       	ldi	r24, 0x1D	; 29
 3be:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Stop();                             // Stop I2C
 3c2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <I2C_Stop>
 3c6:	08 95       	ret

Disassembly of section .text.IR_Triggered:

0000038e <IR_Triggered>:

int IR_Triggered(void)
{
	
	//	set pin to output 
	DIO_voidSetPinDirection(IR_Port,IR_Pin,INPUT);
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	65 e0       	ldi	r22, 0x05	; 5
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_voidSetPinDirection>
	if (DIO_u8GetPinValue(IR_Port, IR_Pin) == 0)
 398:	65 e0       	ldi	r22, 0x05	; 5
 39a:	83 e0       	ldi	r24, 0x03	; 3
 39c:	0e 94 13 01 	call	0x226	; 0x226 <DIO_u8GetPinValue>
 3a0:	81 11       	cpse	r24, r1
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <IR_Triggered+0x1c>
		return 1; 
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	08 95       	ret
	else 
		return 0; 
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
}
 3ae:	08 95       	ret

Disassembly of section .text.MPU6050_Init:

000001a0 <MPU6050_Init>:
float Xg=0,Yg=0,Zg=0;		/*	Real Values	*/


void MPU6050_Init()										/* Gyro initialization function */
{
	I2C_Init();
 1a0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	2f e7       	ldi	r18, 0x7F	; 127
 1a6:	89 ea       	ldi	r24, 0xA9	; 169
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <MPU6050_Init+0xa>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <MPU6050_Init+0x14>
 1b4:	00 00       	nop

	_delay_ms(150);										/* Power up time >100ms */
	
	I2C_Start_Wait(0xD0);								/* Start with device write address */
 1b6:	80 ed       	ldi	r24, 0xD0	; 208
 1b8:	0e 94 85 01 	call	0x30a	; 0x30a <I2C_Start_Wait>

	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
 1bc:	89 e1       	ldi	r24, 0x19	; 25
 1be:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
 1c2:	87 e0       	ldi	r24, 0x07	; 7
 1c4:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Stop();
 1c8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <I2C_Stop>


	I2C_Start_Wait(0xD0);
 1cc:	80 ed       	ldi	r24, 0xD0	; 208
 1ce:	0e 94 85 01 	call	0x30a	; 0x30a <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
 1d2:	8b e6       	ldi	r24, 0x6B	; 107
 1d4:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Stop();
 1de:	0e 94 f7 01 	call	0x3ee	; 0x3ee <I2C_Stop>

	I2C_Start_Wait(0xD0);
 1e2:	80 ed       	ldi	r24, 0xD0	; 208
 1e4:	0e 94 85 01 	call	0x30a	; 0x30a <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
 1e8:	8a e1       	ldi	r24, 0x1A	; 26
 1ea:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Stop();
 1f4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <I2C_Stop>

	I2C_Start_Wait(0xD0);
 1f8:	80 ed       	ldi	r24, 0xD0	; 208
 1fa:	0e 94 85 01 	call	0x30a	; 0x30a <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
 1fe:	8b e1       	ldi	r24, 0x1B	; 27
 200:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
 204:	88 e1       	ldi	r24, 0x18	; 24
 206:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Stop();
 20a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <I2C_Stop>

	I2C_Start_Wait(0xD0);
 20e:	80 ed       	ldi	r24, 0xD0	; 208
 210:	0e 94 85 01 	call	0x30a	; 0x30a <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Write(0x01);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Write>
	I2C_Stop();
 220:	0e 94 f7 01 	call	0x3ee	; 0x3ee <I2C_Stop>
 224:	08 95       	ret

Disassembly of section .text.main:

00000292 <main>:
*/


int main(void)
{
	UART_init();
 292:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_init>
	MPU6050_Init();
 296:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <MPU6050_Init>
	/*	MPU6050 Variables	*/
	extern float Xa, Ya, Za, t;												//	Real Value of MPU6050
	extern float Xg, Yg, Zg;												//	Real Values of MPU6050

	float Heading; 
	Magneto_init();
 29a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Magneto_init>
		HX711_main_function();
		#endif

		#if SELECTOR == 3		//	IR
		/*	///////////////////////////////////////////			IR			*///////////////////////////////////////////
				if (IR_Triggered())
 29e:	0e 94 c7 01 	call	0x38e	; 0x38e <IR_Triggered>
 2a2:	89 2b       	or	r24, r25
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <main+0x20>
					UART_puts("YES\n\r");
 2a6:	68 ea       	ldi	r22, 0xA8	; 168
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_puts>
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <main+0x2a>
				else
					UART_puts("NO\n\r");
 2b2:	6e ea       	ldi	r22, 0xAE	; 174
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_puts>
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	84 e3       	ldi	r24, 0x34	; 52
 2c0:	9c e0       	ldi	r25, 0x0C	; 12
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0x30>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x3a>
 2cc:	00 00       	nop
 2ce:	e7 cf       	rjmp	.-50     	; 0x29e <main+0xc>

Disassembly of section .text.DIO_voidSetPinDirection:

000000b4 <DIO_voidSetPinDirection>:
			switch (PORTID)
			{	
			case PORTA	: 	CLR_BIT(PORTA_REG, PINID);		break; 
			case PORTB	: 	CLR_BIT(PORTB_REG, PINID);		break; 
			case PORTC	: 	CLR_BIT(PORTC_REG, PINID);		break; 
			case PORTD	: 	CLR_BIT(PORTD_REG, PINID);		break; 
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	08 f0       	brcs	.+2      	; 0xba <DIO_voidSetPinDirection+0x6>
  b8:	72 c0       	rjmp	.+228    	; 0x19e <DIO_voidSetPinDirection+0xea>
  ba:	68 30       	cpi	r22, 0x08	; 8
  bc:	08 f0       	brcs	.+2      	; 0xc0 <DIO_voidSetPinDirection+0xc>
  be:	6f c0       	rjmp	.+222    	; 0x19e <DIO_voidSetPinDirection+0xea>
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	a1 f5       	brne	.+104    	; 0x12c <DIO_voidSetPinDirection+0x78>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	89 f0       	breq	.+34     	; 0xea <DIO_voidSetPinDirection+0x36>
  c8:	28 f0       	brcs	.+10     	; 0xd4 <DIO_voidSetPinDirection+0x20>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	c9 f0       	breq	.+50     	; 0x100 <DIO_voidSetPinDirection+0x4c>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	11 f1       	breq	.+68     	; 0x116 <DIO_voidSetPinDirection+0x62>
  d2:	08 95       	ret
  d4:	2a b3       	in	r18, 0x1a	; 26
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_voidSetPinDirection+0x2c>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_voidSetPinDirection+0x28>
  e4:	82 2b       	or	r24, r18
  e6:	8a bb       	out	0x1a, r24	; 26
  e8:	08 95       	ret
  ea:	27 b3       	in	r18, 0x17	; 23
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_voidSetPinDirection+0x42>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_voidSetPinDirection+0x3e>
  fa:	82 2b       	or	r24, r18
  fc:	87 bb       	out	0x17, r24	; 23
  fe:	08 95       	ret
 100:	24 b3       	in	r18, 0x14	; 20
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_voidSetPinDirection+0x58>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_voidSetPinDirection+0x54>
 110:	82 2b       	or	r24, r18
 112:	84 bb       	out	0x14, r24	; 20
 114:	08 95       	ret
 116:	21 b3       	in	r18, 0x11	; 17
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_voidSetPinDirection+0x6e>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_voidSetPinDirection+0x6a>
 126:	82 2b       	or	r24, r18
 128:	81 bb       	out	0x11, r24	; 17
 12a:	08 95       	ret
 12c:	41 11       	cpse	r20, r1
 12e:	37 c0       	rjmp	.+110    	; 0x19e <DIO_voidSetPinDirection+0xea>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	91 f0       	breq	.+36     	; 0x158 <DIO_voidSetPinDirection+0xa4>
 134:	28 f0       	brcs	.+10     	; 0x140 <DIO_voidSetPinDirection+0x8c>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	d9 f0       	breq	.+54     	; 0x170 <DIO_voidSetPinDirection+0xbc>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	29 f1       	breq	.+74     	; 0x188 <DIO_voidSetPinDirection+0xd4>
 13e:	08 95       	ret
 140:	2a b3       	in	r18, 0x1a	; 26
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_voidSetPinDirection+0x98>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_voidSetPinDirection+0x94>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	8a bb       	out	0x1a, r24	; 26
 156:	08 95       	ret
 158:	27 b3       	in	r18, 0x17	; 23
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_voidSetPinDirection+0xb0>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_voidSetPinDirection+0xac>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	87 bb       	out	0x17, r24	; 23
 16e:	08 95       	ret
 170:	24 b3       	in	r18, 0x14	; 20
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinDirection+0xc8>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinDirection+0xc4>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	84 bb       	out	0x14, r24	; 20
 186:	08 95       	ret
 188:	21 b3       	in	r18, 0x11	; 17
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_voidSetPinDirection+0xe0>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_voidSetPinDirection+0xdc>
 198:	80 95       	com	r24
 19a:	82 23       	and	r24, r18
 19c:	81 bb       	out	0x11, r24	; 17
 19e:	08 95       	ret

Disassembly of section .text.DIO_u8GetPinValue:

00000226 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 PORTID, u8 PINID)
{
	u8 Local_u8Data = 0xFF; 
	
	/*		Range Check			*/
	if((PORTID < 4) && (PINID < 8))
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	70 f5       	brcc	.+92     	; 0x286 <DIO_u8GetPinValue+0x60>
 22a:	68 30       	cpi	r22, 0x08	; 8
 22c:	70 f5       	brcc	.+92     	; 0x28a <DIO_u8GetPinValue+0x64>
	{

			switch (PORTID)
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	79 f0       	breq	.+30     	; 0x250 <DIO_u8GetPinValue+0x2a>
 232:	28 f0       	brcs	.+10     	; 0x23e <DIO_u8GetPinValue+0x18>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	a9 f0       	breq	.+42     	; 0x262 <DIO_u8GetPinValue+0x3c>
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	e1 f0       	breq	.+56     	; 0x274 <DIO_u8GetPinValue+0x4e>
 23c:	28 c0       	rjmp	.+80     	; 0x28e <DIO_u8GetPinValue+0x68>
			{
			//PIN REGISTER is responsible for input
			case PORTA	:	Local_u8Data =  	GET_BIT(PINA_REG, PINID);		break; 
 23e:	89 b3       	in	r24, 0x19	; 25
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_u8GetPinValue+0x22>
 244:	95 95       	asr	r25
 246:	87 95       	ror	r24
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_u8GetPinValue+0x1e>
 24c:	81 70       	andi	r24, 0x01	; 1
 24e:	08 95       	ret
			case PORTB	:	Local_u8Data =  	GET_BIT(PINB_REG, PINID);		break; 
 250:	86 b3       	in	r24, 0x16	; 22
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_u8GetPinValue+0x34>
 256:	95 95       	asr	r25
 258:	87 95       	ror	r24
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_u8GetPinValue+0x30>
 25e:	81 70       	andi	r24, 0x01	; 1
 260:	08 95       	ret
			case PORTC	:	Local_u8Data =  	GET_BIT(PINC_REG, PINID);		break; 
 262:	83 b3       	in	r24, 0x13	; 19
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_u8GetPinValue+0x46>
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_u8GetPinValue+0x42>
 270:	81 70       	andi	r24, 0x01	; 1
 272:	08 95       	ret
			case PORTD	:	Local_u8Data =  	GET_BIT(PIND_REG, PINID);		break; 
 274:	80 b3       	in	r24, 0x10	; 16
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8GetPinValue+0x58>
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_u8GetPinValue+0x54>
 282:	81 70       	andi	r24, 0x01	; 1
 284:	08 95       	ret
}


u8 DIO_u8GetPinValue (u8 PORTID, u8 PINID)
{
	u8 Local_u8Data = 0xFF; 
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	08 95       	ret
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	08 95       	ret
 28e:	8f ef       	ldi	r24, 0xFF	; 255
	else 
	{
			/*	Return ERROR 	*/
	}
	return Local_u8Data;
}
 290:	08 95       	ret

Disassembly of section .text.I2C_Init:

000003fa <I2C_Init>:

#include "I2C_Master.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
 3fa:	11 b8       	out	0x01, r1	; 1
 3fc:	80 e2       	ldi	r24, 0x20	; 32
 3fe:	80 b9       	out	0x00, r24	; 0
 400:	08 95       	ret

Disassembly of section .text.I2C_Start:

000002d0 <I2C_Start>:
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
 2d0:	94 ea       	ldi	r25, 0xA4	; 164
 2d2:	96 bf       	out	0x36, r25	; 54
 2d4:	06 b6       	in	r0, 0x36	; 54
 2d6:	07 fe       	sbrs	r0, 7
 2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <I2C_Start+0x4>
 2da:	91 b1       	in	r25, 0x01	; 1
 2dc:	98 7f       	andi	r25, 0xF8	; 248
 2de:	98 30       	cpi	r25, 0x08	; 8
 2e0:	71 f4       	brne	.+28     	; 0x2fe <I2C_Start+0x2e>
 2e2:	83 b9       	out	0x03, r24	; 3
 2e4:	84 e8       	ldi	r24, 0x84	; 132
 2e6:	86 bf       	out	0x36, r24	; 54
 2e8:	06 b6       	in	r0, 0x36	; 54
 2ea:	07 fe       	sbrs	r0, 7
 2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <I2C_Start+0x18>
 2ee:	81 b1       	in	r24, 0x01	; 1
 2f0:	88 7f       	andi	r24, 0xF8	; 248
 2f2:	88 31       	cpi	r24, 0x18	; 24
 2f4:	31 f0       	breq	.+12     	; 0x302 <I2C_Start+0x32>
 2f6:	80 32       	cpi	r24, 0x20	; 32
 2f8:	31 f4       	brne	.+12     	; 0x306 <I2C_Start+0x36>
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	08 95       	ret
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	08 95       	ret
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	08 95       	ret

Disassembly of section .text.I2C_Stop:

000003ee <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
 3ee:	84 e9       	ldi	r24, 0x94	; 148
 3f0:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
 3f2:	06 b6       	in	r0, 0x36	; 54
 3f4:	04 fc       	sbrc	r0, 4
 3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <I2C_Stop+0x4>
}
 3f8:	08 95       	ret

Disassembly of section .text.I2C_Start_Wait:

0000030a <I2C_Start_Wait>:
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
 30a:	cf 93       	push	r28
 30c:	c8 2f       	mov	r28, r24
 30e:	84 ea       	ldi	r24, 0xA4	; 164
 310:	86 bf       	out	0x36, r24	; 54
 312:	06 b6       	in	r0, 0x36	; 54
 314:	07 fe       	sbrs	r0, 7
 316:	fd cf       	rjmp	.-6      	; 0x312 <I2C_Start_Wait+0x8>
 318:	81 b1       	in	r24, 0x01	; 1
 31a:	88 7f       	andi	r24, 0xF8	; 248
 31c:	88 30       	cpi	r24, 0x08	; 8
 31e:	b9 f7       	brne	.-18     	; 0x30e <I2C_Start_Wait+0x4>
 320:	c3 b9       	out	0x03, r28	; 3
 322:	84 e8       	ldi	r24, 0x84	; 132
 324:	86 bf       	out	0x36, r24	; 54
 326:	06 b6       	in	r0, 0x36	; 54
 328:	07 fe       	sbrs	r0, 7
 32a:	fd cf       	rjmp	.-6      	; 0x326 <I2C_Start_Wait+0x1c>
 32c:	81 b1       	in	r24, 0x01	; 1
 32e:	88 7f       	andi	r24, 0xF8	; 248
 330:	88 31       	cpi	r24, 0x18	; 24
 332:	19 f0       	breq	.+6      	; 0x33a <I2C_Start_Wait+0x30>
 334:	0e 94 f7 01 	call	0x3ee	; 0x3ee <I2C_Stop>
 338:	ea cf       	rjmp	.-44     	; 0x30e <I2C_Start_Wait+0x4>
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

Disassembly of section .text.I2C_Write:

0000036a <I2C_Write>:
 36a:	83 b9       	out	0x03, r24	; 3
 36c:	84 e8       	ldi	r24, 0x84	; 132
 36e:	86 bf       	out	0x36, r24	; 54
 370:	06 b6       	in	r0, 0x36	; 54
 372:	07 fe       	sbrs	r0, 7
 374:	fd cf       	rjmp	.-6      	; 0x370 <I2C_Write+0x6>
 376:	81 b1       	in	r24, 0x01	; 1
 378:	88 7f       	andi	r24, 0xF8	; 248
 37a:	88 32       	cpi	r24, 0x28	; 40
 37c:	21 f0       	breq	.+8      	; 0x386 <I2C_Write+0x1c>
 37e:	80 33       	cpi	r24, 0x30	; 48
 380:	21 f4       	brne	.+8      	; 0x38a <I2C_Write+0x20>
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	08 95       	ret
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 95       	ret
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	08 95       	ret

Disassembly of section .text.UART_init:

000003de <UART_init>:

u8 UART_RecieveData(void)				//A function to Receive Data
{
	while(GET_BIT(UCSRA,RXC)==0);	//wait until all data is received
	return UDR;
}
 3de:	10 bc       	out	0x20, r1	; 32
 3e0:	8f ec       	ldi	r24, 0xCF	; 207
 3e2:	89 b9       	out	0x09, r24	; 9
 3e4:	88 e1       	ldi	r24, 0x18	; 24
 3e6:	8a b9       	out	0x0a, r24	; 10
 3e8:	86 e8       	ldi	r24, 0x86	; 134
 3ea:	80 bd       	out	0x20, r24	; 32
 3ec:	08 95       	ret

Disassembly of section .text.UART_send_byte:

00000402 <UART_send_byte>:

void UART_send_byte(u8 Data)			//A function to Transmit Char (1 Byte)
{
	while(GET_BIT(UCSRA,UDRE)==0);	//Wait until all data is transmitted
 402:	5d 9b       	sbis	0x0b, 5	; 11
 404:	fe cf       	rjmp	.-4      	; 0x402 <UART_send_byte>
	UDR=Data;
 406:	8c b9       	out	0x0c, r24	; 12
 408:	08 95       	ret

Disassembly of section .text.UART_puts:

0000033e <UART_puts>:

u8 UART_RecieveData(void)				//A function to Receive Data
{
	while(GET_BIT(UCSRA,RXC)==0);	//wait until all data is received
	return UDR;
}
 33e:	cf 92       	push	r12
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	6b 01       	movw	r12, r22
 346:	e8 2e       	mov	r14, r24
 348:	06 c0       	rjmp	.+12     	; 0x356 <UART_puts+0x18>
 34a:	9f ef       	ldi	r25, 0xFF	; 255
 34c:	c9 1a       	sub	r12, r25
 34e:	d9 0a       	sbc	r13, r25
 350:	e9 0a       	sbc	r14, r25
 352:	0e 94 01 02 	call	0x402	; 0x402 <UART_send_byte>
 356:	f6 01       	movw	r30, r12
 358:	84 91       	lpm	r24, Z
 35a:	e7 fc       	sbrc	r14, 7
 35c:	80 81       	ld	r24, Z
 35e:	81 11       	cpse	r24, r1
 360:	f4 cf       	rjmp	.-24     	; 0x34a <UART_puts+0xc>
 362:	ef 90       	pop	r14
 364:	df 90       	pop	r13
 366:	cf 90       	pop	r12
 368:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000412 <_fini>:
 412:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000414 <__funcs_on_exit>:
 414:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000416 <__simulator_exit>:
 416:	08 95       	ret

Disassembly of section .text.exit:

000003c8 <exit>:
 3c8:	ec 01       	movw	r28, r24
 3ca:	0e 94 0a 02 	call	0x414	; 0x414 <__funcs_on_exit>
 3ce:	0e 94 09 02 	call	0x412	; 0x412 <_fini>
 3d2:	ce 01       	movw	r24, r28
 3d4:	0e 94 0b 02 	call	0x416	; 0x416 <__simulator_exit>
 3d8:	ce 01       	movw	r24, r28
 3da:	0e 94 07 02 	call	0x40e	; 0x40e <_Exit>

Disassembly of section .text._Exit:

0000040e <_Exit>:
 40e:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
