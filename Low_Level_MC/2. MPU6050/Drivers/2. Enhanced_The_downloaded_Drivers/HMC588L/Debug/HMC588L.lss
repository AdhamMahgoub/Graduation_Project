
HMC588L.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000220  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000024f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  0000025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000150e  00000000  00000000  0000032d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ae  00000000  00000000  0000183b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000756  00000000  00000000  00001fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00002740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024f  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c2  00000000  00000000  00002aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000019e  0000019e  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Magneto_init 0000003c  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.I2C_Init 00000008  0000018e  0000018e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.I2C_Start 0000003a  000000fe  000000fe  00000172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.I2C_Stop 0000000c  00000182  00000182  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.I2C_Write 00000024  00000138  00000138  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000056  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.UART_init 00000010  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.UART_TransmitData 00000008  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_fini 00000002  000001a6  000001a6  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  000001a8  000001a8  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  000001aa  000001aa  0000021e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  0000015c  0000015c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  000001a2  000001a2  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

0000019e <__bad_interrupt>:
 19e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Magneto_init:

000000c2 <Magneto_init>:
#include "UART_Interface.h"
#include "I2C_Master_H_file.h"

void Magneto_init()										/* Magneto initialize function */
{
	I2C_Start(0x3C);									/* Start and write SLA+W */
  c2:	8c e3       	ldi	r24, 0x3C	; 60
  c4:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Start>
	
	I2C_Write(0x00);									/* Write memory location address */
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Write>
	UART_TransmitData('1');
  ce:	81 e3       	ldi	r24, 0x31	; 49
  d0:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitData>
	I2C_Write(0x70);									/* Configure register A as 8-average, 15 Hz default, normal measurement */
  d4:	80 e7       	ldi	r24, 0x70	; 112
  d6:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Write>
	UART_TransmitData('2');
  da:	82 e3       	ldi	r24, 0x32	; 50
  dc:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitData>
	I2C_Write(0xA0);									/* Configure register B for gain */
  e0:	80 ea       	ldi	r24, 0xA0	; 160
  e2:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Write>
	UART_TransmitData('3');
  e6:	83 e3       	ldi	r24, 0x33	; 51
  e8:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitData>
	I2C_Write(0x00);									/* Configure continuous measurement mode in mode register */
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Write>
	UART_TransmitData('4');
  f2:	84 e3       	ldi	r24, 0x34	; 52
  f4:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitData>
	I2C_Stop();											/* Stop I2C */
  f8:	0e 94 c1 00 	call	0x182	; 0x182 <I2C_Stop>
  fc:	08 95       	ret

Disassembly of section .text.I2C_Init:

0000018e <I2C_Init>:

#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
 18e:	11 b8       	out	0x01, r1	; 1
 190:	80 e2       	ldi	r24, 0x20	; 32
 192:	80 b9       	out	0x00, r24	; 0
 194:	08 95       	ret

Disassembly of section .text.I2C_Start:

000000fe <I2C_Start>:
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
  fe:	94 ea       	ldi	r25, 0xA4	; 164
 100:	96 bf       	out	0x36, r25	; 54
 102:	06 b6       	in	r0, 0x36	; 54
 104:	07 fe       	sbrs	r0, 7
 106:	fd cf       	rjmp	.-6      	; 0x102 <I2C_Start+0x4>
 108:	91 b1       	in	r25, 0x01	; 1
 10a:	98 7f       	andi	r25, 0xF8	; 248
 10c:	98 30       	cpi	r25, 0x08	; 8
 10e:	71 f4       	brne	.+28     	; 0x12c <I2C_Start+0x2e>
 110:	83 b9       	out	0x03, r24	; 3
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	86 bf       	out	0x36, r24	; 54
 116:	06 b6       	in	r0, 0x36	; 54
 118:	07 fe       	sbrs	r0, 7
 11a:	fd cf       	rjmp	.-6      	; 0x116 <I2C_Start+0x18>
 11c:	81 b1       	in	r24, 0x01	; 1
 11e:	88 7f       	andi	r24, 0xF8	; 248
 120:	88 31       	cpi	r24, 0x18	; 24
 122:	31 f0       	breq	.+12     	; 0x130 <I2C_Start+0x32>
 124:	80 32       	cpi	r24, 0x20	; 32
 126:	31 f4       	brne	.+12     	; 0x134 <I2C_Start+0x36>
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	08 95       	ret
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	08 95       	ret
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	08 95       	ret

Disassembly of section .text.I2C_Stop:

00000182 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
 182:	84 e9       	ldi	r24, 0x94	; 148
 184:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
 186:	06 b6       	in	r0, 0x36	; 54
 188:	04 fc       	sbrc	r0, 4
 18a:	fd cf       	rjmp	.-6      	; 0x186 <I2C_Stop+0x4>
}
 18c:	08 95       	ret

Disassembly of section .text.I2C_Write:

00000138 <I2C_Write>:
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
 138:	83 b9       	out	0x03, r24	; 3
 13a:	84 e8       	ldi	r24, 0x84	; 132
 13c:	86 bf       	out	0x36, r24	; 54
 13e:	06 b6       	in	r0, 0x36	; 54
 140:	07 fe       	sbrs	r0, 7
 142:	fd cf       	rjmp	.-6      	; 0x13e <I2C_Write+0x6>
 144:	81 b1       	in	r24, 0x01	; 1
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	88 32       	cpi	r24, 0x28	; 40
 14a:	21 f0       	breq	.+8      	; 0x154 <I2C_Write+0x1c>
 14c:	80 33       	cpi	r24, 0x30	; 48
 14e:	21 f4       	brne	.+8      	; 0x158 <I2C_Write+0x20>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	08 95       	ret
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:



int main(void)
{
	UART_init();
  6c:	0e 94 b9 00 	call	0x172	; 0x172 <UART_init>

	UART_TransmitData('a');	
  70:	81 e6       	ldi	r24, 0x61	; 97
  72:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	8f e1       	ldi	r24, 0x1F	; 31
  78:	9e e4       	ldi	r25, 0x4E	; 78
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <main+0xe>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <main+0x14>
  80:	00 00       	nop
	_delay_ms(10);
	
	I2C_Init();											/* Initialize I2C */
  82:	0e 94 c7 00 	call	0x18e	; 0x18e <I2C_Init>
  86:	8f e1       	ldi	r24, 0x1F	; 31
  88:	9e e4       	ldi	r25, 0x4E	; 78
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x1e>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x24>
  90:	00 00       	nop
	_delay_ms(10);
	
	UART_TransmitData('b');
  92:	82 e6       	ldi	r24, 0x62	; 98
  94:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitData>
  98:	8f e1       	ldi	r24, 0x1F	; 31
  9a:	9e e4       	ldi	r25, 0x4E	; 78
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x30>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
	_delay_ms(10);
	
	Magneto_init();										/* Initialize magneto */
  a4:	0e 94 61 00 	call	0xc2	; 0xc2 <Magneto_init>
  a8:	8f e1       	ldi	r24, 0x1F	; 31
  aa:	9e e4       	ldi	r25, 0x4E	; 78
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x40>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
	_delay_ms(10);
	
	UART_TransmitData('c');
  b4:	83 e6       	ldi	r24, 0x63	; 99
  b6:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitData>
	UART_TransmitData('d');
  ba:	84 e6       	ldi	r24, 0x64	; 100
  bc:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitData>
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x54>

Disassembly of section .text.UART_init:

00000172 <UART_init>:
// A function to initialize UART Communication
void UART_init(void){
	

	
	UBRRH = (unsigned char)(BAUD_PRESCALE>>8);
 172:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BAUD_PRESCALE;
 174:	8f ec       	ldi	r24, 0xCF	; 207
 176:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
 178:	88 e1       	ldi	r24, 0x18	; 24
 17a:	8a b9       	out	0x0a, r24	; 10

	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 17c:	86 e8       	ldi	r24, 0x86	; 134
 17e:	80 bd       	out	0x20, r24	; 32
 180:	08 95       	ret

Disassembly of section .text.UART_TransmitData:

00000196 <UART_TransmitData>:
	
}

//A function to Transmit Data
void UART_TransmitData(u8 Data){
	while(GET_BIT(UCSRA,UDRE)==0);	//Wait until all data is transmitted
 196:	5d 9b       	sbis	0x0b, 5	; 11
 198:	fe cf       	rjmp	.-4      	; 0x196 <UART_TransmitData>
	UDR=Data;
 19a:	8c b9       	out	0x0c, r24	; 12
 19c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000001a6 <_fini>:
 1a6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001a8 <__funcs_on_exit>:
 1a8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001aa <__simulator_exit>:
 1aa:	08 95       	ret

Disassembly of section .text.exit:

0000015c <exit>:
 15c:	ec 01       	movw	r28, r24
 15e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__funcs_on_exit>
 162:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_fini>
 166:	ce 01       	movw	r24, r28
 168:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__simulator_exit>
 16c:	ce 01       	movw	r24, r28
 16e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Exit>

Disassembly of section .text._Exit:

000001a2 <_Exit>:
 1a2:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
