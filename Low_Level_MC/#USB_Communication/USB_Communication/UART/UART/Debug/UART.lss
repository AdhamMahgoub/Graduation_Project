
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000163  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b62  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062d  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000306  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b2  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000b2  000000b2  00000126  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000018  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.UART_init 00000010  0000009a  0000009a  0000010e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_TransmitData 00000008  000000aa  000000aa  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000000ba  000000ba  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000bc  000000bc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000000be  000000be  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  00000084  00000084  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000b6  000000b6  0000012a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#define F_CPU 1000000UL
#include <util/delay.h>

int main(void)
{
		UART_init();
  6c:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_init>
	


    while(1)
    {
		 UART_TransmitData(test);	
  70:	82 e6       	ldi	r24, 0x62	; 98
  72:	0e 94 55 00 	call	0xaa	; 0xaa <UART_TransmitData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	83 ec       	ldi	r24, 0xC3	; 195
  78:	99 e0       	ldi	r25, 0x09	; 9
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <main+0xe>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <main+0x14>
  80:	00 00       	nop
  82:	f6 cf       	rjmp	.-20     	; 0x70 <main+0x4>

Disassembly of section .text.UART_init:

0000009a <UART_init>:
// A function to initialize UART Communication
void UART_init(void){
	

	
	UBRRH = (unsigned char)(BAUD_PRESCALE>>8);
  9a:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BAUD_PRESCALE;
  9c:	89 e1       	ldi	r24, 0x19	; 25
  9e:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	8a b9       	out	0x0a, r24	; 10

	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  a4:	86 e8       	ldi	r24, 0x86	; 134
  a6:	80 bd       	out	0x20, r24	; 32
  a8:	08 95       	ret

Disassembly of section .text.UART_TransmitData:

000000aa <UART_TransmitData>:
	
}

//A function to Transmit Data
void UART_TransmitData(u8 Data){
	while(GET_BIT(UCSRA,UDRE)==0);	//Wait until all data is transmitted
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <UART_TransmitData>
	UDR=Data;
  ae:	8c b9       	out	0x0c, r24	; 12
  b0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000000ba <_fini>:
  ba:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000bc <__funcs_on_exit>:
  bc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000be <__simulator_exit>:
  be:	08 95       	ret

Disassembly of section .text.exit:

00000084 <exit>:
  84:	ec 01       	movw	r28, r24
  86:	0e 94 5e 00 	call	0xbc	; 0xbc <__funcs_on_exit>
  8a:	0e 94 5d 00 	call	0xba	; 0xba <_fini>
  8e:	ce 01       	movw	r24, r28
  90:	0e 94 5f 00 	call	0xbe	; 0xbe <__simulator_exit>
  94:	ce 01       	movw	r24, r28
  96:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Exit>

Disassembly of section .text._Exit:

000000b6 <_Exit>:
  b6:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
